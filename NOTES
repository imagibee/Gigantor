Testing
-------
dotnet test -c Release

Benchmarks
----------
export MYDOTNET=net7.0
dotnet Benchmarking/SearchApp/bin/Release/${MYDOTNET}/SearchApp.dll benchmark ${TMPDIR}/enwik9
dotnet Benchmarking/SearchApp/bin/Release/${MYDOTNET}/SearchApp.dll benchmarkstream ${TMPDIR}/enwik9
dotnet Benchmarking/SearchApp/bin/Release/${MYDOTNET}/SearchApp.dll benchmarkstream ${TMPDIR}/enwik9.gz
dotnet Benchmarking/LineApp/bin/Release/${MYDOTNET}/LineApp.dll benchmark ${TMPDIR}/enwik9
dotnet Benchmarking/DuplicatApp/bin/Release/${MYDOTNET}/DuplicateApp.dll benchmark "${TMPDIR}/enwik9;${TMPDIR}/enwik91"

Code Coverage
------------
cd Testing/Functional
dotnet coverage collect dotnet test -f xml
reportgenerator "-reports:output.xml" "-targetdir:TestResults"
open TestResults/index.html

Nuget
-----
export MYVER=
dotnet pack Gigantor -c Release
nuget add Gigantor/bin/Release/Imagibee.Gigantor.${MYVER}.nupkg -source ~/nuget
nuget push Gigantor/bin/Release/Imagibee.Gigantor.${MYVER}.nupkg -source https://api.nuget.org/v3/index.json
nuget delete Imagibee.Gigantor ${MYVER}  -source ~/nuget

(if apikey isn't saved)
dotnet nuget push Gigantor/bin/Release/Imagibee.Gigantor.${MYVER}.nupkg --api-key ${MYKEY} --source https://api.nuget.org/v3/index.json

